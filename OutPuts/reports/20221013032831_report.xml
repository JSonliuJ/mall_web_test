<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="11" tests="13" time="51.841" timestamp="2022-10-13T03:28:32.259964" hostname="V_LJJLLIU-PC3"><testcase classname="TestCases.test_001_register.TestRegister" name="test_user_register[data0]" time="0.001"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_001_register.py:36: unconditional skip</skipped></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login[data0]" time="22.097"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//a[text()=&quot;登录&quot;]&quot;}&#10;  (Session info: chrome=106.0.5249.103)">self = &lt;TestCases.test_002_login.TestLogin object at 0x000002593DDCD490&gt;
access_web = (&lt;selenium.webdriver.chrome.webdriver.WebDriver (session="7c9a782b54d13f0547ad65c48bd56bd8")&gt;, &lt;PageObjects.login_page.LoginPage object at 0x000002593DCA98B0&gt;)
data = {'expected': 'zhangsan', 'password': '123456', 'user': '17778063407'}

    @pytest.mark.smoke
    @pytest.mark.parametrize("data", LD.success_data)
    def test_username_login(self,access_web,data):
&gt;       access_web[1].login(data["user"], data["password"])

TestCases\test_002_login.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
PageObjects\login_page.py:28: in login
    self.click_element(iloc.login_btn, doc)
Common\base_page.py:96: in click_element
    ele = self.find_element(locator, doc)
Common\base_page.py:87: in find_element
    return self.driver.find_element(*locator)
C:\.virtualenv\web_test\lib\site-packages\selenium\webdriver\remote\webdriver.py:976: in find_element
    return self.execute(Command.FIND_ELEMENT, {
C:\.virtualenv\web_test\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002593DE6F880&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x77E27B5E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77E27B2E+238]\\n"}}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//a[text()="登录"]"}
E         (Session info: chrome=106.0.5249.103)

C:\.virtualenv\web_test\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: NoSuchElementException</failure></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login[data1]" time="20.141"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//a[text()=&quot;登录&quot;]&quot;}&#10;  (Session info: chrome=106.0.5249.103)">self = &lt;TestCases.test_002_login.TestLogin object at 0x000002593DDCD2E0&gt;
access_web = (&lt;selenium.webdriver.chrome.webdriver.WebDriver (session="7c9a782b54d13f0547ad65c48bd56bd8")&gt;, &lt;PageObjects.login_page.LoginPage object at 0x000002593DCA98B0&gt;)
data = {'expected': '1a2b', 'password': '1234', 'user': '1a2b'}

    @pytest.mark.smoke
    @pytest.mark.parametrize("data", LD.success_data)
    def test_username_login(self,access_web,data):
&gt;       access_web[1].login(data["user"], data["password"])

TestCases\test_002_login.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
PageObjects\login_page.py:28: in login
    self.click_element(iloc.login_btn, doc)
Common\base_page.py:96: in click_element
    ele = self.find_element(locator, doc)
Common\base_page.py:87: in find_element
    return self.driver.find_element(*locator)
C:\.virtualenv\web_test\lib\site-packages\selenium\webdriver\remote\webdriver.py:976: in find_element
    return self.execute(Command.FIND_ELEMENT, {
C:\.virtualenv\web_test\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002593DE6F880&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x77E27B5E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77E27B2E+238]\\n"}}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//a[text()="登录"]"}
E         (Session info: chrome=106.0.5249.103)

C:\.virtualenv\web_test\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: NoSuchElementException</failure></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login_error[data0]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_002_login.py:54: unconditional skip</skipped></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login_error[data1]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_002_login.py:54: unconditional skip</skipped></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login_error[data2]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_002_login.py:54: unconditional skip</skipped></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login_error[data3]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_002_login.py:54: unconditional skip</skipped></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login_error[data4]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_002_login.py:54: unconditional skip</skipped></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login_error[data5]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_002_login.py:54: unconditional skip</skipped></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login_error[data6]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_002_login.py:54: unconditional skip</skipped></testcase><testcase classname="TestCases.test_002_login.TestLogin" name="test_username_login_error[data7]" time="2.215"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_002_login.py:54: unconditional skip</skipped></testcase><testcase classname="TestCases.test_004_login_keyword_driver.TestKeyWord" name="test_keyword" time="0.000"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\mall_web_test\TestCases\test_004_login_keyword_driver.py:26: unconditional skip</skipped></testcase><testcase classname="TestCases.test_reg_demo" name="test_demo" time="0.002"><skipped type="pytest.skip" message="unconditional skip">C:\Users\jieliu666\python3_code\sublime_text03\14SoftwareTest\python_project\webTest\python_webTest\webTest_mall\TestCases\test_reg_demo.py:7: unconditional skip</skipped></testcase></testsuite></testsuites>